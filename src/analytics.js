/**
 * @typedef {object} analyticsConfig
 * @property {string} [baseURI] analytics URI
 * @property {string} [cid] client ID (autogenerated by default)
 * @property {string} [tid] tracking ID
 * @property {("email")} ec event category
 * @property {string} [el] event label
 * @property {string} ev event value
 */

/**
 * @typedef {object} documentAnalyticsConfig
 * @property {string} [dp] document path, like /email/newsletter
 * @property {string} [dt] document title, like "Newsletter"
 */

/**
 * @typedef {object} clickAnalyticsConfig
 * @property {string} //source,  utm_source
 * @property {string} //medium,  utm_medium
 * @property {string} //product, utm_campaign
 * 
 */

/**
 * @typedef {analyticsConfig & documentAnalyticsConfig} fullAnalyticsConfig
 */

/**
 * @typedef {analyticsConfig & clickAnalyticsConfig} fullClickAnalyticsConfig
 */

/**
 * 
 * @param {fullAnalyticsConfig} config
 * @param {("open"|"click")} eventType 
 */
const makeAnalyticsQuery = (config, eventType) => {
    const cacheBuster = Math.floor((Math.random() * 1e10));

    const { cid, dp, dt, el, ev } = config;

    const validParams = {
        v: 1,
        tid: "UA-167977153-1",
        t: "event",
        ec: "email",
        ea: eventType,
        z: cacheBuster,
        cid,
        dp,
        dt,
        el,
        ev
    };

    //"el" has to go first as &el is incorrectly encoded in Gmail
    return JSONtoQuery(validParams, {
        encodeParams: true,
        paramOrder: ["el", "tid", "cid", "v", "t", "ec", "ea", "ev", "dp", "dt", "z"]
    });
};

/**
 * @param {Candidate} candidate
 * @param {fullAnalyticsConfig} [config] 
 * @returns {string}
 */
const trackEmailOpen = (candidate, config = {}) => {

    try {

        const { baseURI = "https://www.google-analytics.com/collect" } = config;

        config.cid = candidate.id;
        config.dt = "COVID-19 Tracking Email";

        const query = makeAnalyticsQuery(config, "open");

        const fullURI = `${baseURI}?${query}`;

        // return `<img src="${fullURI}" />`;
        return "";
    }
    catch (error) {
        console.warn(error);
        return "";
    }
};

/**
 * @summary enables link tracking
 * @param {string} anchor 
 * @param {Candidate} candidate
 * @param {fullClickAnalyticsConfig} [config]
 * @returns {string}
 */
const trackLinkClick = (anchor, candidate, config = {}) => {

    try {

        const { baseURI = "https://www.google-analytics.com/collect" } = config;

        const query = makeAnalyticsQuery(config, "click");

        const hasRefSet = /\w+?(\w|\d)+/.test(anchor);

        return "";

    }
    catch (error) {
        console.warn(error);
        return anchor;
    }

};

/**
 * @typedef {({
 *  id : (string | undefined),
 *  uuids : (string[] | undefined)
 * })} uuidGetterConfig
 * 
 * @summary guarantees unique uuid in context of id column
 * 
 * @param {uuidGetterConfig} config
 * @returns {string[]}
 */
const getUuidUntilUnique = (
    {
        id = Utilities.getUuid(),
        uuids = []
    }
) => {

    if (id && uuids.indexOf(id) === -1) {
        uuids.push(id);
        return uuids;
    }

    return getUuidUntilUnique({ uuids });
};