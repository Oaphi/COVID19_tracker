/**
 * @typedef {object} analyticsConfig
 * @property {string} [baseURI] analytics URI
 * @property {string} [cid] client ID (autogenerated by default)
 * @property {string} [tid] tracking ID
 * 
 * @param {analyticsConfig} config 
 * @param {Candidate} candidate
 * @returns {string}
 */
const createAnalyticsTag = (config, candidate) => {

    try {

        const {
            baseURI = "https://www.google-analytics.com/collect?v=1",
            cid = candidate,
            tid = "UA-167977153-1"
        } = config;

        const query = JSONtoQuery({
            cid,
            tid,
            t : "event",
            ec : "email",
            ea : "open"
        });

        const fullURI = `${baseURI}?${query}`;

        const tag = `<img src="${baseURI}" />`;

        //should return img tag with analytics data

    }
    catch (error) {
        console.log(error);
        return "";
    }
};

/**
 * @typedef {({
 *  id : (string | undefined),
 *  uuids : (string[] | undefined)
 * })} uuidGetterConfig
 * 
 * @summary guarantees unique uuid in context of id column
 * 
 * @param {uuidGetterConfig} config
 * @returns {string[]}
 */
const getUuidUntilUnique = (
    {
        id = Utilities.getUuid(),
        uuids = []
    }
) => {

    if (id && uuids.indexOf(id) === -1) {
        uuids.push(id);
        return uuids;
    }

    return getUuidUntilUnique({ uuids });
};